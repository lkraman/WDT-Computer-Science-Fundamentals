1) Write pseudocode for bubble sort. (I used the source provided in the example)

 FUNCTION bubbleSort(collection)
   REPEAT
     SET swapped to false
     FOR i = FIRST INDEX of collection to LAST INDEX of collection - 1
       IF collection[i] > collection[i + 1] THEN
         SET tmp to collection[i]
         SET collection[i] to collection[i + 1]
         SET collection[i + 1] to tmp
         SET swapped to true
       END IF
     END FOR
   UNTIL swapped is FALSE

   RETURN collection
 END FUNCTION


2) Write pseudocode for quicksort.
JS coding source: https://www.w3resource.com/javascript-exercises/searching-and-sorting-algorithm/searching-and-sorting-algorithm-exercise-1.php

FUNCTION quickSort(collection)
    IF collection length less than or equal to 1
        RETURN collection
    ELSE
        SET left, right, newArray to empty arrays
        SET pivot to collection.pop()
        SET length to length of collection

        FOR i = 0, i less than length, i INCREMENT by one
            IF collection[i] less than or equal to pivot
                PUSH collection[i] to last index of left
            ELSE
                PUSH collection[i] to last index of right
            END IF
        END FOR
        RETURN newArray.concat(quickSort(left), pivot, quickSort(right));
    END IF
END FUNCTION


3) We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. Walking through each algorithm with a few sample collections may help.

The other algorithms are simply not as fast as merge sort and quick sort. Merge sort and quick sort scale well and can be used on larger data sets. Merge sort and quick sort have a time complexity of O(n^2) to O(n log n). However, by looking at the code, they are much more complex and not as easy to understand. This is a tradeoff...complexity for efficiency.


4) All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?

Bucket sort uses "buckets" within an array. With the assistance of other algorithms, like insertion sort, elements are added to each bucket, then sorted. Bucket sort works best when the input can be uniformly distributed among all of the buckets as evenly as possible.
